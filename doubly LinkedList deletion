class DNode {
    int data;
    DNode prev;
    DNode next;

    public DNode(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

public class DoublyLinkedListOperations {
    DNode head;
    DNode tail;

    public void addAtEnd(int data) {
        DNode newNode = new DNode(data);
        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }

    public void deleteLastNode() {
        if (head == null) {
            System.out.println("The list is empty. Nothing to delete.");
            return;
        }

        if (head == tail) {
            System.out.println("Deleting node with value: " + head.data);
            head = tail = null;
            return;
        }

        System.out.println("Deleting node with value: " + tail.data);
        tail = tail.prev;
        tail.next = null;
    }

    public void displayList() {
        if (head == null) {
            System.out.println("The list is empty.");
            return;
        }

        DNode current = head;
        System.out.println("Doubly Linked List:");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        DoublyLinkedListOperations list = new DoublyLinkedListOperations();
        list.addAtEnd(10);
        list.addAtEnd(20);
        list.addAtEnd(30);
        list.addAtEnd(40);

        System.out.println("Original List:");
        list.displayList();

        list.deleteLastNode();
        list.displayList();

        list.deleteLastNode();
        list.displayList();

        list.deleteLastNode();
        list.displayList();

        list.deleteLastNode();
        list.displayList();

        list.deleteLastNode();
    }
}
